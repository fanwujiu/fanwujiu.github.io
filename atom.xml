<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://fanwujiu.github.io</id>
    <title>日神社</title>
    <updated>2020-08-23T11:28:01.035Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://fanwujiu.github.io"/>
    <link rel="self" href="https://fanwujiu.github.io/atom.xml"/>
    <subtitle>                 やたきの居</subtitle>
    <logo>https://fanwujiu.github.io/images/avatar.png</logo>
    <icon>https://fanwujiu.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 日神社</rights>
    <entry>
        <title type="html"><![CDATA[test]]></title>
        <id>https://fanwujiu.github.io/text/</id>
        <link href="https://fanwujiu.github.io/text/">
        </link>
        <updated>2020-08-19T02:40:02.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA["mmath.h"]]></title>
        <id>https://fanwujiu.github.io/mmath-h/</id>
        <link href="https://fanwujiu.github.io/mmath-h/">
        </link>
        <updated>2020-08-18T04:44:34.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="mmathh">&quot;mmath.h&quot;</h1>
<pre><code class="language-cpp">/*
[More Math Algorithms To Highers]
Code by izumi@Uchiha Dev Team
Uchiha Dev Team (c) 2020
E-mail: 2335979273@qq.com
*/
#ifndef MMATH
#define MMATH

#include &lt;math.h&gt;
#include &lt;stdarg.h&gt;
#include &lt;string&gt;

using std::string;
using std::ostream;
int min (int a, int b) //最小值 
{
	return a &lt; b ? a : b;
}
int max (int a, int b) //最大值 
{
	return a &gt; b ? a : b;
}
void cswap (int a, int b)
{
	int t = a; a = b; b = t;
}
int gcd (int n, int k) //最大公约数 
{
	return k == 0 ? n : gcd (k, (n % k));
}
int lcm (int n, int k) //最小公倍数 
{
	return n * k / gcd (n, k);
}
int power (int base, int pow) //快速幂 
{
    int result = 1;
    while (pow &gt; 0) 
	{
        if (pow &amp; 1) result = result * base;
        pow &gt;&gt;= 1;
        base = base * base;
    }
    return result;
}
//分数结构体 
struct frac
{
	int numerator; //分子 
	int denominator; //分母
	int reduc_frac () //约分 
	{
		int temp = gcd (numerator, denominator);
		numerator /= temp;
		denominator /= temp;
	}
	int operator = (string c) //初始化分数 （例：frac a = &quot;1/2&quot;;） 
	{
		if (c.size () &lt;= 0) return -1;
		int i, j, x = 0, y = 0;
		for (i = 0; c[i] != '/'; ++i) x = x * 10 + (c[i] - '0');
		for (j = i + 1; j &lt; c.size (); ++j) y = y * 10 + (c[j] - '0');
		numerator = x;
		denominator = y;
		return 1;
	}
	frac ()
	{
		numerator = 0;
		denominator = 1;
		reduc_frac ();
	}
};
int reduc_com (frac a, frac b) //通分 
{
	int temp = lcm (a.denominator, b.denominator);
	a.numerator *= (temp / a.denominator);
	b.numerator *= (temp / a.denominator);
	a.denominator = b.denominator = temp;
	return 1;
}
frac operator + (frac a, frac b) //分数加法 
{
	frac ans;
	reduc_com (a, b);
	ans.denominator = a.denominator;
	ans.numerator = a.numerator + b.numerator;
	ans.reduc_frac ();
	return ans;
}
frac operator - (frac a, frac b) //分数减法 
{
	frac ans;
	reduc_com (a, b);
	ans.denominator = a.denominator;
	ans.numerator = a.numerator - b.numerator;
	ans.reduc_frac ();
	return ans;
}
frac operator * (frac a, frac b) //分数乘法 
{
	frac ans;
	ans.denominator = a.denominator * b.denominator;
	ans.numerator = a.numerator * b.numerator;
	ans.reduc_frac ();
	return ans;
}
frac operator / (frac a, frac b) //分数除法 
{
	cswap (b.denominator, b.numerator);
	return a * b;
}
frac operator ^ (frac n, int k)
{
	frac ans;
	ans.numerator = power (n.numerator, k);
	ans.denominator = power (n.denominator, k);
	return ans;
}

#define SMA
/*
[String Maths Algorithms]
Code by itachi@Uchiha Dev Team
Uchiha Dev Team (c) 2020
E-mail: 2335979273@qq.com
*/
string plus (string a, string b) //字符串加法 
{
    string ans;
    int len1 = a.length (); int len2 = b.length ();
    if (len1 &lt; len2) for (int i = 1; i &lt;= len2 - len1; ++i) a = &quot;0&quot; + a;
    else for (int i = 1; i &lt;= len1 - len2; ++i) b = &quot;0&quot; + b;
    len1 = a.length ();
    int cf = 0, temp;
    for (int i = len1 - 1; i &gt;= 0; --i)
    {
        temp = a[i] - '0' + b[i] - '0' + cf;
        cf = temp / 10; temp %= 10;
        ans = char (temp + '0') + ans;
    }
    if (cf != 0) ans = char (cf + '0') + ans;
    return ans;
}
string minus (string a, string b) //字符串减法 
{
    string str;
    int pr = 0;
    if (a &lt; b) 
    {
        swap (a, b); pr = -1;
    }
    int tmp = a.length () - b.length(), cf = 0;
    for (int i = b.length () - 1; i &gt;= 0; --i)
    {
        if (b[tmp + i] &lt; b[i] + cf)
        {
            str = char (a[tmp + i] - b[i] - cf + '0' + 10) + str;
            cf = 1;
        }
        else
        {
            str = char (a[tmp + i] - b[i] - cf + '0') + str;
            cf = 0;
        }
    }
    for (int i = tmp - 1; i &gt;= 0; --i)
    {
        if (a[i] - cf &gt;= '0')
        {
            str = char (a[i] - cf) + str;
            cf = 0;
        }
        else
        {
            str = char (a[i] - cf + 10) + str;
            cf = 1;
        }
    }
    str.erase (0, str.find_first_not_of ('0'));
    if (str.size () == 0) 
    {
        str = &quot;0&quot;;
        pr = -1;
    }
    if (pr == 0) str = &quot;-&quot; + str;
    return str;
}
string times (string a, string b) //字符串乘法 
{
    int len1 = a.length (), len2 = b.length ();
    string str, tempstr;
    for (int i = len2 - 1; i &gt;= 0; --i)
    {
        tempstr = &quot;&quot;;
        int temp = b[i] - '0', t = 0, cf = 0;
        if (temp != 0)
        {
            for (int j = 1; j &lt;= len2 - 1 - i; ++j) tempstr += &quot;0&quot;;
            for (int j = len1 - 1; j &gt;= 0; --j)
            {
                t = (temp * (a[j] - '0') + cf) % 10;
                cf = (temp * (a[j] - '0') + cf) / 10;
                tempstr = char (t + '0') + tempstr;
            }
            if (cf != 0) tempstr = char (cf + '0') + tempstr;
        }
        str = plus (str, tempstr);
    }
    str.erase (0, str.find_first_not_of ('0'));
    return str;
}
string div (string a, string b) //字符串整除 
{
    string ans;
    while (a &gt; b)
    {
        int n = 0;
        string A = a.substr (0, b.length ());
        while (1) 
        {
            string t = minus (A, b);
            if (t &gt;= &quot;0&quot;)
            {
                n++;
                A = t;
            }
            else break;
        }
        ans = char (n + '0') + ans;
        if (A == &quot;0&quot;) a = a.substr (b.length ());
        else a = A + a.substr (b.length ());
    }
    return ans;
}
int operator /= (string a, string b)
{
	string ans = div (a, b);
	a = ans;
	return 1;
}
string mod (string a, string b) //字符串取余 
{
    string ans;
    while (a &gt; b)
    {
        int n = 0;
        string A = a.substr (0, b.length ());
        while (1) 
        {
            string t = minus (A, b);
            if (t &gt;= &quot;0&quot;)
            {
                n++;
                A = t;
            }
            else break;
        }
        ans = char (n + '0') + ans;
        if (A == &quot;0&quot;) a = a.substr (b.length ());
        else a = A + a.substr (b.length ());
    }
    return a;
}
string spow (string n, string k) //字符串乘方 
{
    if (k == &quot;0&quot;) return &quot;1&quot;;
    else if (mod (k, &quot;2&quot;) == &quot;1&quot;) return times (n, spow (n, minus (k, &quot;1&quot;)));
    else return times (spow (n, div (k, &quot;2&quot;)), spow (n, div (k, &quot;2&quot;)));
}
string sabs (string x) //字符串绝对值 
{
    if (x[0] == '-') x[0] = 0;
    return x;
}
int null (string x) //字符串是否为空 
{
    int i = 0;
    while (i++) if (x[i] != '0') return 1;
    return 0;
}
string sgcd (string n, string k) //字符串最大公约数 
{
    string t;
    while (!null (k))   
    {
        t = n; n = k; k = mod (t, k);  
    }
    return n;
}  
string slcm (string a, string b) //字符串最小公倍数 
{
    return div (times (a, b), sgcd (a, b));
} 
//字符串分数结构体 
struct str_frac
{
	string numerator; //分子 
	string denominator; //分母
	int reduc_frac () //约分 
	{
		string temp = sgcd (numerator, denominator);
		numerator /= temp;
		denominator /= temp;
	}
	int operator = (string c) //初始化分数 （例：frac a = &quot;1/2&quot;;） 
	{
		if (c.size () &lt;= 0) return -1;
		int i, j;
		string x = &quot;0&quot;, y = &quot;0&quot;;
		for (i = 0; c[i] != '/'; ++i) x[i] = c[i];
		for (j = i + 1; j &lt; c.size (); ++j) y[j] = c[j];
		numerator = x;
		denominator = y;
		return 1;
	} 
	str_frac ()
	{
		numerator = &quot;0&quot;;
		denominator = &quot;1&quot;;
	}
};

#endif
</code></pre>
]]></summary>
        <content type="html"><![CDATA[<h1 id="mmathh">&quot;mmath.h&quot;</h1>
<pre><code class="language-cpp">/*
[More Math Algorithms To Highers]
Code by izumi@Uchiha Dev Team
Uchiha Dev Team (c) 2020
E-mail: 2335979273@qq.com
*/
#ifndef MMATH
#define MMATH

#include &lt;math.h&gt;
#include &lt;stdarg.h&gt;
#include &lt;string&gt;

using std::string;
using std::ostream;
int min (int a, int b) //最小值 
{
	return a &lt; b ? a : b;
}
int max (int a, int b) //最大值 
{
	return a &gt; b ? a : b;
}
void cswap (int a, int b)
{
	int t = a; a = b; b = t;
}
int gcd (int n, int k) //最大公约数 
{
	return k == 0 ? n : gcd (k, (n % k));
}
int lcm (int n, int k) //最小公倍数 
{
	return n * k / gcd (n, k);
}
int power (int base, int pow) //快速幂 
{
    int result = 1;
    while (pow &gt; 0) 
	{
        if (pow &amp; 1) result = result * base;
        pow &gt;&gt;= 1;
        base = base * base;
    }
    return result;
}
//分数结构体 
struct frac
{
	int numerator; //分子 
	int denominator; //分母
	int reduc_frac () //约分 
	{
		int temp = gcd (numerator, denominator);
		numerator /= temp;
		denominator /= temp;
	}
	int operator = (string c) //初始化分数 （例：frac a = &quot;1/2&quot;;） 
	{
		if (c.size () &lt;= 0) return -1;
		int i, j, x = 0, y = 0;
		for (i = 0; c[i] != '/'; ++i) x = x * 10 + (c[i] - '0');
		for (j = i + 1; j &lt; c.size (); ++j) y = y * 10 + (c[j] - '0');
		numerator = x;
		denominator = y;
		return 1;
	}
	frac ()
	{
		numerator = 0;
		denominator = 1;
		reduc_frac ();
	}
};
int reduc_com (frac a, frac b) //通分 
{
	int temp = lcm (a.denominator, b.denominator);
	a.numerator *= (temp / a.denominator);
	b.numerator *= (temp / a.denominator);
	a.denominator = b.denominator = temp;
	return 1;
}
frac operator + (frac a, frac b) //分数加法 
{
	frac ans;
	reduc_com (a, b);
	ans.denominator = a.denominator;
	ans.numerator = a.numerator + b.numerator;
	ans.reduc_frac ();
	return ans;
}
frac operator - (frac a, frac b) //分数减法 
{
	frac ans;
	reduc_com (a, b);
	ans.denominator = a.denominator;
	ans.numerator = a.numerator - b.numerator;
	ans.reduc_frac ();
	return ans;
}
frac operator * (frac a, frac b) //分数乘法 
{
	frac ans;
	ans.denominator = a.denominator * b.denominator;
	ans.numerator = a.numerator * b.numerator;
	ans.reduc_frac ();
	return ans;
}
frac operator / (frac a, frac b) //分数除法 
{
	cswap (b.denominator, b.numerator);
	return a * b;
}
frac operator ^ (frac n, int k)
{
	frac ans;
	ans.numerator = power (n.numerator, k);
	ans.denominator = power (n.denominator, k);
	return ans;
}

#define SMA
/*
[String Maths Algorithms]
Code by itachi@Uchiha Dev Team
Uchiha Dev Team (c) 2020
E-mail: 2335979273@qq.com
*/
string plus (string a, string b) //字符串加法 
{
    string ans;
    int len1 = a.length (); int len2 = b.length ();
    if (len1 &lt; len2) for (int i = 1; i &lt;= len2 - len1; ++i) a = &quot;0&quot; + a;
    else for (int i = 1; i &lt;= len1 - len2; ++i) b = &quot;0&quot; + b;
    len1 = a.length ();
    int cf = 0, temp;
    for (int i = len1 - 1; i &gt;= 0; --i)
    {
        temp = a[i] - '0' + b[i] - '0' + cf;
        cf = temp / 10; temp %= 10;
        ans = char (temp + '0') + ans;
    }
    if (cf != 0) ans = char (cf + '0') + ans;
    return ans;
}
string minus (string a, string b) //字符串减法 
{
    string str;
    int pr = 0;
    if (a &lt; b) 
    {
        swap (a, b); pr = -1;
    }
    int tmp = a.length () - b.length(), cf = 0;
    for (int i = b.length () - 1; i &gt;= 0; --i)
    {
        if (b[tmp + i] &lt; b[i] + cf)
        {
            str = char (a[tmp + i] - b[i] - cf + '0' + 10) + str;
            cf = 1;
        }
        else
        {
            str = char (a[tmp + i] - b[i] - cf + '0') + str;
            cf = 0;
        }
    }
    for (int i = tmp - 1; i &gt;= 0; --i)
    {
        if (a[i] - cf &gt;= '0')
        {
            str = char (a[i] - cf) + str;
            cf = 0;
        }
        else
        {
            str = char (a[i] - cf + 10) + str;
            cf = 1;
        }
    }
    str.erase (0, str.find_first_not_of ('0'));
    if (str.size () == 0) 
    {
        str = &quot;0&quot;;
        pr = -1;
    }
    if (pr == 0) str = &quot;-&quot; + str;
    return str;
}
string times (string a, string b) //字符串乘法 
{
    int len1 = a.length (), len2 = b.length ();
    string str, tempstr;
    for (int i = len2 - 1; i &gt;= 0; --i)
    {
        tempstr = &quot;&quot;;
        int temp = b[i] - '0', t = 0, cf = 0;
        if (temp != 0)
        {
            for (int j = 1; j &lt;= len2 - 1 - i; ++j) tempstr += &quot;0&quot;;
            for (int j = len1 - 1; j &gt;= 0; --j)
            {
                t = (temp * (a[j] - '0') + cf) % 10;
                cf = (temp * (a[j] - '0') + cf) / 10;
                tempstr = char (t + '0') + tempstr;
            }
            if (cf != 0) tempstr = char (cf + '0') + tempstr;
        }
        str = plus (str, tempstr);
    }
    str.erase (0, str.find_first_not_of ('0'));
    return str;
}
string div (string a, string b) //字符串整除 
{
    string ans;
    while (a &gt; b)
    {
        int n = 0;
        string A = a.substr (0, b.length ());
        while (1) 
        {
            string t = minus (A, b);
            if (t &gt;= &quot;0&quot;)
            {
                n++;
                A = t;
            }
            else break;
        }
        ans = char (n + '0') + ans;
        if (A == &quot;0&quot;) a = a.substr (b.length ());
        else a = A + a.substr (b.length ());
    }
    return ans;
}
int operator /= (string a, string b)
{
	string ans = div (a, b);
	a = ans;
	return 1;
}
string mod (string a, string b) //字符串取余 
{
    string ans;
    while (a &gt; b)
    {
        int n = 0;
        string A = a.substr (0, b.length ());
        while (1) 
        {
            string t = minus (A, b);
            if (t &gt;= &quot;0&quot;)
            {
                n++;
                A = t;
            }
            else break;
        }
        ans = char (n + '0') + ans;
        if (A == &quot;0&quot;) a = a.substr (b.length ());
        else a = A + a.substr (b.length ());
    }
    return a;
}
string spow (string n, string k) //字符串乘方 
{
    if (k == &quot;0&quot;) return &quot;1&quot;;
    else if (mod (k, &quot;2&quot;) == &quot;1&quot;) return times (n, spow (n, minus (k, &quot;1&quot;)));
    else return times (spow (n, div (k, &quot;2&quot;)), spow (n, div (k, &quot;2&quot;)));
}
string sabs (string x) //字符串绝对值 
{
    if (x[0] == '-') x[0] = 0;
    return x;
}
int null (string x) //字符串是否为空 
{
    int i = 0;
    while (i++) if (x[i] != '0') return 1;
    return 0;
}
string sgcd (string n, string k) //字符串最大公约数 
{
    string t;
    while (!null (k))   
    {
        t = n; n = k; k = mod (t, k);  
    }
    return n;
}  
string slcm (string a, string b) //字符串最小公倍数 
{
    return div (times (a, b), sgcd (a, b));
} 
//字符串分数结构体 
struct str_frac
{
	string numerator; //分子 
	string denominator; //分母
	int reduc_frac () //约分 
	{
		string temp = sgcd (numerator, denominator);
		numerator /= temp;
		denominator /= temp;
	}
	int operator = (string c) //初始化分数 （例：frac a = &quot;1/2&quot;;） 
	{
		if (c.size () &lt;= 0) return -1;
		int i, j;
		string x = &quot;0&quot;, y = &quot;0&quot;;
		for (i = 0; c[i] != '/'; ++i) x[i] = c[i];
		for (j = i + 1; j &lt; c.size (); ++j) y[j] = c[j];
		numerator = x;
		denominator = y;
		return 1;
	} 
	str_frac ()
	{
		numerator = &quot;0&quot;;
		denominator = &quot;1&quot;;
	}
};

#endif
</code></pre>
]]></content>
    </entry>
</feed>